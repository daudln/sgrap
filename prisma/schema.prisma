generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProfileType {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  type          ProfileType @default(STUDENT)
  emailVerified DateTime?
  password      String?     @db.VarChar(200)
  image         String?
  accounts      Account[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isActive      Boolean     @default(true)
  Profile       Profile?

  @@index([email, id])
  @@map("user")
}

model VerificationToken {
  id      Int      @id @default(autoincrement())
  token   String   @unique @default(cuid()) @db.VarChar(100)
  email   String
  expires DateTime

  @@unique([email, token])
  @@map("email_verification")
}

model ResetPasswordToken {
  id      Int      @id @default(autoincrement())
  token   String   @unique @default(cuid()) @db.VarChar(100)
  email   String
  expires DateTime

  @@unique([email, token])
  @@map("reset_password_token")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Subject {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(cuid()) @db.VarChar(100)
  code        String   @unique @db.VarChar(20)
  name        String   @unique @db.VarChar(100)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)

  @@map("subject")
}

model School {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(cuid()) @db.VarChar(100)
  motto     String    @db.VarChar(200)
  name      String    @unique @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  Class     Class[]
  Profile   Profile[]

  @@map("school")
}

model Class {
  id       Int    @id @default(autoincrement())
  uuid     String @unique @default(cuid()) @db.VarChar(100)
  name     String @db.VarChar(50)
  school   School @relation(fields: [schoolId], references: [id])
  schoolId Int

  @@unique([schoolId, name])
  @@map("class")
}

model Profile {
  userId    String      @id @unique
  uuid      String      @unique @default(cuid()) @db.VarChar(100)
  type      ProfileType @default(STUDENT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  isActive  Boolean     @default(true)
  school    School      @relation(fields: [schoolId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
  schoolId  Int

  @@map("profile")
}
