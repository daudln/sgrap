generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../schema"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  NORMAL_USER
}

enum ProfileType {
  STUDENT
  TEACHER
  ADMIN
}

enum SubjectCategory {
  SCIENCE
  ART
}

enum StudentClass {
  FORM_ONE
  FORM_TWO
  FORM_THREE
  FORM_FOUR
  FORM_FIVE
  FORM_SIX
}

enum Gender {
  MALE
  FEMALE
}

model PermissionGroup {
  id          String       @id @default(cuid())
  name        String       @db.VarChar(100)
  permissions Permission[]

  @@map("permission_group")
}

model Permission {
  id                String          @id @default(cuid())
  group             PermissionGroup @relation(fields: [permissionGroupId], references: [id])
  permissionGroupId String          @map("permission_group_id")

  @@map("permission")
}

model Role {
  id   String @id @default(cuid())
  name String
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  type          UserType  @default(NORMAL_USER)
  emailVerified DateTime? @map("email_verified")
  password      String?   @db.VarChar(200)
  image         String?
  accounts      Account[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  isActive      Boolean   @default(true) @map("is_active")
  Profile       Profile?

  @@index([email, id])
  @@map("user")
}

model VerificationToken {
  id      Int      @id @default(autoincrement())
  token   String   @unique @default(cuid()) @db.VarChar(100)
  email   String
  expires DateTime

  @@unique([email, token])
  @@map("email_verification")
}

model ResetPasswordToken {
  id      Int      @id @default(autoincrement())
  token   String   @unique @default(cuid()) @db.VarChar(100)
  email   String
  expires DateTime

  @@unique([email, token])
  @@map("reset_password_token")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Subject {
  id          String          @id @unique @default(cuid()) @db.VarChar(100)
  code        String          @unique @db.VarChar(20)
  name        String          @unique @db.VarChar(100)
  description String?
  category    SubjectCategory @default(ART)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  isActive    Boolean         @default(true)

  @@map("subject")
}

model School {
  id        String    @id @unique @default(cuid()) @db.VarChar(100)
  motto     String    @db.VarChar(200)
  name      String    @unique @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  Profile   Profile[]
  Teacher   Teacher[]
  Student   Student[]

  @@map("school")
}

model Profile {
  userId      String      @id @unique
  id          String      @unique @default(cuid()) @db.VarChar(100)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isActive    Boolean     @default(true)
  phoneNumber String?
  gender      Gender      @default(MALE)
  type        ProfileType @default(STUDENT)
  school      School      @relation(fields: [schoolId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  schoolId    String
  Teacher     Teacher?
  Student     Student?

  @@map("profile")
}

model Teacher {
  profileUserId String  @id @unique
  profile       Profile @relation(fields: [profileUserId], references: [userId])
  school        School  @relation(fields: [schoolId], references: [id])
  schoolId      String

  @@unique([profileUserId, schoolId])
  @@map("teacher")
}

model Student {
  profileUserId String       @id @unique
  profile       Profile      @relation(fields: [profileUserId], references: [userId])
  school        School       @relation(fields: [schoolId], references: [id])
  schoolId      String
  classLevel    StudentClass

  @@unique([schoolId, profileUserId, classLevel])
  @@map("student")
}
